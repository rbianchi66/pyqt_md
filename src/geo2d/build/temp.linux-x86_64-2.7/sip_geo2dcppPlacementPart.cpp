/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppPlacementPart.cpp"


extern "C" {static PyObject *meth_Placement_Part_shape(PyObject *, PyObject *);}
static PyObject *meth_Placement_Part_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Placement::Part *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Placement_Part, &sipCpp, &a0))
        {
            Placement::Shape *sipRes;

            sipRes = sipCpp->shape(a0);

            return sipConvertFromType(sipRes,sipType_Placement_Shape,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Part, sipName_shape, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Placement_Part(void *, const sipTypeDef *);}
static void *cast_Placement_Part(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Placement_Part)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Placement_Part(void *, int);}
static void release_Placement_Part(void *sipCppV,int)
{
    delete reinterpret_cast<Placement::Part *>(sipCppV);
}


extern "C" {static void dealloc_Placement_Part(sipSimpleWrapper *);}
static void dealloc_Placement_Part(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Placement_Part(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Placement_Part(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Placement_Part(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Placement::Part *sipCpp = 0;

    {
        const std::vector<Path2d> * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_std_vector_0100Path2d,&a0, &a0State))
        {
            sipCpp = new Placement::Part(*a0);
            sipReleaseType(const_cast<std::vector<Path2d> *>(a0),sipType_std_vector_0100Path2d,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_Placement_Part[] = {
    {SIP_MLNAME_CAST(sipName_shape), meth_Placement_Part_shape, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_Placement_Part = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Placement__Part,
        {0}
    },
    {
        sipNameNr_Part,
        {11, 255, 0},
        1, methods_Placement_Part,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_Placement_Part,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Placement_Part,
    0,
    0,
    0,
    release_Placement_Part,
    cast_Placement_Part,
    0,
    0,
    0
};
