/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"

#line 235 "sip/stlextra.sip"
#include <map>
#include <stdio.h>
#line 13 "sip_geo2dcppstdmap24000600stdvector0100Path2d.cpp"



extern "C" {static void assign_std_map_2400_0600std_vector_0100Path2d(void *, SIP_SSIZE_T, const void *);}
static void assign_std_map_2400_0600std_vector_0100Path2d(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::map<double,std::vector<Path2d> > *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::map<double,std::vector<Path2d> > *>(sipSrc);
}


extern "C" {static void *array_std_map_2400_0600std_vector_0100Path2d(SIP_SSIZE_T);}
static void *array_std_map_2400_0600std_vector_0100Path2d(SIP_SSIZE_T sipNrElem)
{
    return new std::map<double,std::vector<Path2d> >[sipNrElem];
}


extern "C" {static void *copy_std_map_2400_0600std_vector_0100Path2d(const void *, SIP_SSIZE_T);}
static void *copy_std_map_2400_0600std_vector_0100Path2d(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::map<double,std::vector<Path2d> >(reinterpret_cast<const std::map<double,std::vector<Path2d> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_map_2400_0600std_vector_0100Path2d(void *, int);}
static void release_std_map_2400_0600std_vector_0100Path2d(void *ptr, int)
{
    delete reinterpret_cast<std::map<double,std::vector<Path2d> > *>(ptr);
}



extern "C" {static int convertTo_std_map_2400_0600std_vector_0100Path2d(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_map_2400_0600std_vector_0100Path2d(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::map<double,std::vector<Path2d> > **sipCppPtr = reinterpret_cast<std::map<double,std::vector<Path2d> > **>(sipCppPtrV);

#line 285 "sip/stlextra.sip"

    const sipMappedType* vmt = sipFindMappedType("std::vector<Path2d>");

    if (vmt == NULL)
    {
        PyErr_Format(PyExc_TypeError, "No SIP mapped type found for std::vector<Path2d>");
        *sipIsErr = 1;
        return false;
    }

    // Check the type of the Python object. We check that the type is
    // a dict and that both keys and values have the proper type.
    if (sipIsErr == NULL)
    {
        if (PyDict_Check(sipPy) == 0)
            return false;

        PyObject *key, *value;
        Py_ssize_t pos = 0;

        while (PyDict_Next(sipPy, &pos, &key, &value))
        {
            if (!PyNumber_Check(key))
            {
                PyErr_Format(PyExc_TypeError, "object in keys is not a number");
                return false;
            }

            int vconv = sipCanConvertToMappedType(value, vmt, SIP_NOT_NONE);

            if (vconv == 0)
            {
                PyErr_Format(PyExc_TypeError, "object in values is not a std::vector<Path2d>");
                return false;
            }
        }

        return true;
    }

    std::map<double, std::vector<Path2d> > *map = new std::map<double, std::vector<Path2d> >();

    PyObject *key, *value;
    Py_ssize_t pos = 0;

    while (PyDict_Next(sipPy, &pos, &key, &value))
    {
        int state;

        PyObject *f = PyNumber_Float(key);
        double k = PyFloat_AsDouble(f);
        Py_DECREF(f);

        std::vector<Path2d>* v = reinterpret_cast<std::vector<Path2d>*>(
            sipConvertToMappedType(value, vmt, 0, SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
            break;

        (*map)[k] = *v;

        sipReleaseMappedType(v, vmt, state);
    }

    if (*sipIsErr)
    {
        delete map;
        return false;
    }

    *sipCppPtr = map;
    return sipGetState(sipTransferObj);

#line 126 "sip_geo2dcppstdmap24000600stdvector0100Path2d.cpp"
}


extern "C" {static PyObject *convertFrom_std_map_2400_0600std_vector_0100Path2d(void *, PyObject *);}
static PyObject *convertFrom_std_map_2400_0600std_vector_0100Path2d(void *sipCppV,PyObject *sipTransferObj)
{
   std::map<double,std::vector<Path2d> > *sipCpp = reinterpret_cast<std::map<double,std::vector<Path2d> > *>(sipCppV);

#line 240 "sip/stlextra.sip"
    PyObject *d;

    // Create the Python dict
    if ((d = PyDict_New()) == NULL)
    return NULL;

    // Go through each element in the C++ instance and convert it
    std::map<double, std::vector<Path2d> >::iterator ite;

    const sipTypeDef* vmt = sipFindType("std::vector<Path2d>");

    if (vmt == NULL)
    {
        PyErr_Format(PyExc_TypeError, "No SIP mapped type found for std::vector<Path2d>");
                return NULL;
    }

    for (ite = sipCpp->begin(); ite != sipCpp->end(); ++ite)
    {
        std::vector<Path2d> *v = &((*ite).second);

        PyObject *pobjk, *pobjv;

        pobjk = PyFloat_FromDouble((*ite).first);

        if ((pobjv = sipConvertFromType(v, vmt, sipTransferObj)) == NULL)
        {
            // There was an error so garbage collect the Python list.
            Py_DECREF(pobjk);
            Py_DECREF(d);

                        PyErr_Format(PyExc_TypeError, "object in values is not a std::vector<Path2d>");
                        return NULL;
        }

        // Add the wrapper to the list.
        PyDict_SetItem(d, pobjk, pobjv);
        Py_DECREF(pobjk);
        Py_DECREF(pobjv);
    }

    return d;
#line 178 "sip_geo2dcppstdmap24000600stdvector0100Path2d.cpp"
}


sipMappedTypeDef sipTypeDef__geo2dcpp_std_map_2400_0600std_vector_0100Path2d = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_0,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_map_2400_0600std_vector_0100Path2d,
    array_std_map_2400_0600std_vector_0100Path2d,
    copy_std_map_2400_0600std_vector_0100Path2d,
    release_std_map_2400_0600std_vector_0100Path2d,
    convertTo_std_map_2400_0600std_vector_0100Path2d,
    convertFrom_std_map_2400_0600std_vector_0100Path2d
};
