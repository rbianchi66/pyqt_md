/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




extern "C" {static PyObject *meth_bump_Bumper_bump(PyObject *, PyObject *);}
static PyObject *meth_bump_Bumper_bump(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const bump::Shape * a0;
        bump::PosRot * a1;
        const bump::Shape * a2;
        bump::PosRot * a3;
        double a4;
        bump::Bumper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9", &sipSelf, sipType_bump_Bumper, &sipCpp, sipType_bump_Shape, &a0, sipType_bump_PosRot, &a1, sipType_bump_Shape, &a2, sipType_bump_PosRot, &a3))
        {
            bump::PosRot *sipRes;

            sipRes = new bump::PosRot(sipCpp->bump(*a0,*a1,*a2,*a3,a4));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_bump_PosRot,NULL);
            return sipBuildResult(0,"(Rd)",sipResObj,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Bumper, sipName_bump, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_bump_Bumper(void *, const sipTypeDef *);}
static void *cast_bump_Bumper(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_bump_Bumper)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_bump_Bumper(void *, int);}
static void release_bump_Bumper(void *sipCppV,int)
{
    delete reinterpret_cast<bump::Bumper *>(sipCppV);
}


extern "C" {static void assign_bump_Bumper(void *, SIP_SSIZE_T, const void *);}
static void assign_bump_Bumper(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<bump::Bumper *>(sipDst)[sipDstIdx] = *reinterpret_cast<const bump::Bumper *>(sipSrc);
}


extern "C" {static void *array_bump_Bumper(SIP_SSIZE_T);}
static void *array_bump_Bumper(SIP_SSIZE_T sipNrElem)
{
    return new bump::Bumper[sipNrElem];
}


extern "C" {static void *copy_bump_Bumper(const void *, SIP_SSIZE_T);}
static void *copy_bump_Bumper(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new bump::Bumper(reinterpret_cast<const bump::Bumper *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_bump_Bumper(sipSimpleWrapper *);}
static void dealloc_bump_Bumper(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_bump_Bumper(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_bump_Bumper(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_bump_Bumper(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    bump::Bumper *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new bump::Bumper();

            return sipCpp;
        }
    }

    {
        const bump::Bumper * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_bump_Bumper, &a0))
        {
            sipCpp = new bump::Bumper(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_bump_Bumper[] = {
    {SIP_MLNAME_CAST(sipName_bump), meth_bump_Bumper_bump, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_bump_Bumper = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_bump__Bumper,
        {0}
    },
    {
        sipNameNr_Bumper,
        {18, 255, 0},
        1, methods_bump_Bumper,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_bump_Bumper,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_bump_Bumper,
    assign_bump_Bumper,
    array_bump_Bumper,
    copy_bump_Bumper,
    release_bump_Bumper,
    cast_bump_Bumper,
    0,
    0,
    0
};
