/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 8 "sip/stlextra.sip"
#include <vector>
#line 13 "sip_geo2dcppISurf.cpp"


extern "C" {static PyObject *slot_ISurf___call__(PyObject *sipSelf,PyObject *sipArgs);}
static PyObject *slot_ISurf___call__(PyObject *sipSelf,PyObject *sipArgs)
{
    ISurf *sipCpp = reinterpret_cast<ISurf *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_ISurf));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            P2d *sipRes;

            sipRes = new P2d((*sipCpp)(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_P2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ISurf, sipName___call__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_ISurf(void *, const sipTypeDef *);}
static void *cast_ISurf(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_ISurf)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_ISurf(void *, int);}
static void release_ISurf(void *sipCppV,int)
{
    delete reinterpret_cast<ISurf *>(sipCppV);
}


extern "C" {static void dealloc_ISurf(sipSimpleWrapper *);}
static void dealloc_ISurf(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_ISurf(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_ISurf(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_ISurf(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    ISurf *sipCpp = 0;

    {
        const std::vector<std::vector<P2d> > * a0;
        int a0State = 0;
        int a1 = 1;
        int a2 = 4;
        int a3 = 8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|iii", sipType_std_vector_0600std_vector_0100P2d,&a0, &a0State, &a1, &a2, &a3))
        {
            sipCpp = new ISurf(*a0,a1,a2,a3);
            sipReleaseType(const_cast<std::vector<std::vector<P2d> > *>(a0),sipType_std_vector_0600std_vector_0100P2d,a0State);

            return sipCpp;
        }
    }

    {
        const ISurf * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_ISurf, &a0))
        {
            sipCpp = new ISurf(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_ISurf[] = {
    {(void *)slot_ISurf___call__, call_slot},
    {0, (sipPySlotType)0}
};


sipClassTypeDef sipTypeDef__geo2dcpp_ISurf = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_ISurf,
        {0}
    },
    {
        sipNameNr_ISurf,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_ISurf,
    init_ISurf,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_ISurf,
    0,
    0,
    0,
    release_ISurf,
    cast_ISurf,
    0,
    0,
    0
};
