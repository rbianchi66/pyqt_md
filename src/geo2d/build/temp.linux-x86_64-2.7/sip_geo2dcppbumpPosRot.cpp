/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




extern "C" {static PyObject *meth_bump_PosRot_xform(PyObject *, PyObject *);}
static PyObject *meth_bump_PosRot_xform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bump::PosRot *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bump_PosRot, &sipCpp))
        {
            X2d *sipRes;

            sipRes = new X2d(sipCpp->xform());

            return sipConvertFromNewType(sipRes,sipType_X2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PosRot, sipName_xform, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_bump_PosRot___repr__(PyObject *sipSelf);}
static PyObject *slot_bump_PosRot___repr__(PyObject *sipSelf)
{
    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_bump_PosRot));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 21 "sip/bump.sip"
    PyObject *x = PyFloat_FromDouble(sipCpp->pos.x);
    PyObject *y = PyFloat_FromDouble(sipCpp->pos.y);
    PyObject *r = PyFloat_FromDouble(sipCpp->rot);

    PyObject *xr = PyObject_Repr(x);
    PyObject *yr = PyObject_Repr(y);
    PyObject *rr = PyObject_Repr(r);

    sipRes = PyString_FromFormat("PosRot(%s, %s, %s)",
        PyString_AsString(xr),
        PyString_AsString(yr),
        PyString_AsString(rr)
    );

    Py_DECREF(xr);
    Py_DECREF(yr);
    Py_DECREF(rr);

    Py_DECREF(x);
    Py_DECREF(y);
    Py_DECREF(r);
#line 73 "sip_geo2dcppbumpPosRot.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_bump_PosRot___imul__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_bump_PosRot___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_bump_PosRot)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_bump_PosRot));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const bump::PosRot * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_bump_PosRot, &a0))
        {
            sipCpp->bump::PosRot::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_bump_PosRot___mul__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_bump_PosRot___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        bump::PosRot * a0;
        const bump::PosRot * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_bump_PosRot, &a0, sipType_bump_PosRot, &a1))
        {
            bump::PosRot *sipRes;

            sipRes = new bump::PosRot((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_bump_PosRot,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,mul_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_bump_PosRot(void *, const sipTypeDef *);}
static void *cast_bump_PosRot(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_bump_PosRot)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_bump_PosRot(void *, int);}
static void release_bump_PosRot(void *sipCppV,int)
{
    delete reinterpret_cast<bump::PosRot *>(sipCppV);
}


extern "C" {static void assign_bump_PosRot(void *, SIP_SSIZE_T, const void *);}
static void assign_bump_PosRot(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<bump::PosRot *>(sipDst)[sipDstIdx] = *reinterpret_cast<const bump::PosRot *>(sipSrc);
}


extern "C" {static void *array_bump_PosRot(SIP_SSIZE_T);}
static void *array_bump_PosRot(SIP_SSIZE_T sipNrElem)
{
    return new bump::PosRot[sipNrElem];
}


extern "C" {static void *copy_bump_PosRot(const void *, SIP_SSIZE_T);}
static void *copy_bump_PosRot(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new bump::PosRot(reinterpret_cast<const bump::PosRot *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_bump_PosRot(sipSimpleWrapper *);}
static void dealloc_bump_PosRot(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_bump_PosRot(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_bump_PosRot(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_bump_PosRot(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    bump::PosRot *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new bump::PosRot();

            return sipCpp;
        }
    }

    {
        P2d * a0;
        double a1;
        P2d a2def = P2d(0,0);
        P2d * a2 = &a2def;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9d|J9", sipType_P2d, &a0, &a1, sipType_P2d, &a2))
        {
            sipCpp = new bump::PosRot(*a0,a1,*a2);

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        P2d a3def = P2d(0,0);
        P2d * a3 = &a3def;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ddd|J9", &a0, &a1, &a2, sipType_P2d, &a3))
        {
            sipCpp = new bump::PosRot(a0,a1,a2,*a3);

            return sipCpp;
        }
    }

    {
        const bump::PosRot * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_bump_PosRot, &a0))
        {
            sipCpp = new bump::PosRot(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_bump_PosRot[] = {
    {(void *)slot_bump_PosRot___repr__, repr_slot},
    {(void *)slot_bump_PosRot___imul__, imul_slot},
    {(void *)slot_bump_PosRot___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_bump_PosRot[] = {
    {SIP_MLNAME_CAST(sipName_xform), meth_bump_PosRot_xform, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_bump_PosRot_pos(void *, PyObject *);}
static PyObject *varget_bump_PosRot_pos(void *sipSelf, PyObject *)
{
    P2d *sipVal;
    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipSelf);

    sipVal = &sipCpp->pos;

    return sipConvertFromType(sipVal,sipType_P2d, NULL);
}


extern "C" {static int varset_bump_PosRot_pos(void *, PyObject *, PyObject *);}
static int varset_bump_PosRot_pos(void *sipSelf, PyObject *sipPy, PyObject *)
{
    P2d *sipVal;
    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<P2d *>(sipForceConvertToType(sipPy,sipType_P2d,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->pos = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_bump_PosRot_rot(void *, PyObject *);}
static PyObject *varget_bump_PosRot_rot(void *sipSelf, PyObject *)
{
    double sipVal;
    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipSelf);

    sipVal = sipCpp->rot;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_bump_PosRot_rot(void *, PyObject *, PyObject *);}
static int varset_bump_PosRot_rot(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    bump::PosRot *sipCpp = reinterpret_cast<bump::PosRot *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->rot = sipVal;

    return 0;
}

sipVariableDef variables_bump_PosRot[] = {
    {sipName_pos, varget_bump_PosRot_pos, varset_bump_PosRot_pos, 0},
    {sipName_rot, varget_bump_PosRot_rot, varset_bump_PosRot_rot, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_bump_PosRot = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_bump__PosRot,
        {0}
    },
    {
        sipNameNr_PosRot,
        {18, 255, 0},
        1, methods_bump_PosRot,
        0, 0,
        2, variables_bump_PosRot,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_bump_PosRot,
    init_bump_PosRot,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_bump_PosRot,
    assign_bump_PosRot,
    array_bump_PosRot,
    copy_bump_PosRot,
    release_bump_PosRot,
    cast_bump_PosRot,
    0,
    0,
    0
};
