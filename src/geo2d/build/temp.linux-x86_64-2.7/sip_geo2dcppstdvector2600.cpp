/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"

#line 288 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 12 "sip_geo2dcppstdvector2600.cpp"



extern "C" {static void assign_std_vector_2600(void *, SIP_SSIZE_T, const void *);}
static void assign_std_vector_2600(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::vector<bool> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::vector<bool> *>(sipSrc);
}


extern "C" {static void *array_std_vector_2600(SIP_SSIZE_T);}
static void *array_std_vector_2600(SIP_SSIZE_T sipNrElem)
{
    return new std::vector<bool>[sipNrElem];
}


extern "C" {static void *copy_std_vector_2600(const void *, SIP_SSIZE_T);}
static void *copy_std_vector_2600(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::vector<bool>(reinterpret_cast<const std::vector<bool> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_vector_2600(void *, int);}
static void release_std_vector_2600(void *ptr, int)
{
    delete reinterpret_cast<std::vector<bool> *>(ptr);
}



extern "C" {static int convertTo_std_vector_2600(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_vector_2600(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::vector<bool> **sipCppPtr = reinterpret_cast<std::vector<bool> **>(sipCppPtrV);

#line 311 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    // Controlla il tipo dell'oggetto Python
    if (sipIsErr == NULL)
    {
        // Must be any iterable
        PyObject *i = PyObject_GetIter(sipPy);
        bool iterable = (i != NULL);
        Py_XDECREF(i);
        return iterable;
    }

    // Itera sull'oggetto
    PyObject *iterator = PyObject_GetIter(sipPy);
    PyObject *item;

    // Numero potenziali elementi
    int len = PyObject_Size(sipPy);
    std::vector<bool> *V = new std::vector<bool>();
    V->reserve(len);

    if (len)
    {
        while ((item = PyIter_Next(iterator)))
        {
            if (!PyBool_Check(item))
            {
                PyErr_Format(PyExc_TypeError, "object in iterable cannot be converted to integers");
                *sipIsErr = 1;
                break;
            }

            bool val = item == Py_True;
            V->push_back(val);

            Py_DECREF(item);
        }

        Py_DECREF(iterator);

        if (*sipIsErr)
        {
            delete V;
            return 0;
        }
    }

    *sipCppPtr = V;
    return sipGetState(sipTransferObj);
#line 99 "sip_geo2dcppstdvector2600.cpp"
}


extern "C" {static PyObject *convertFrom_std_vector_2600(void *, PyObject *);}
static PyObject *convertFrom_std_vector_2600(void *sipCppV,PyObject *)
{
   std::vector<bool> *sipCpp = reinterpret_cast<std::vector<bool> *>(sipCppV);

#line 292 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    PyObject *l;

    // Create the Python list of the correct length.
    if ((l = PyList_New(sipCpp -> size())) == NULL)
        return NULL;

    // Go through each element in the C++ instance and convert it to a
    // wrapped object.
    for (std::vector<bool>::size_type i = 0; i < sipCpp -> size(); ++i)
    {
        // Add the wrapper to the list.
        PyList_SET_ITEM(l, i, PyBool_FromLong(sipCpp -> at(i)));
    }

    // Return the Python list.
    return l;
#line 125 "sip_geo2dcppstdvector2600.cpp"
}


sipMappedTypeDef sipTypeDef__geo2dcpp_std_vector_2600 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_503,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_vector_2600,
    array_std_vector_2600,
    copy_std_vector_2600,
    release_std_vector_2600,
    convertTo_std_vector_2600,
    convertFrom_std_vector_2600
};
