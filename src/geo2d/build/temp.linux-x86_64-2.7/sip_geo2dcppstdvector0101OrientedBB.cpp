/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"

#line 512 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 12 "sip_geo2dcppstdvector0101OrientedBB.cpp"



extern "C" {static void assign_std_vector_0101OrientedBB(void *, SIP_SSIZE_T, const void *);}
static void assign_std_vector_0101OrientedBB(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::vector<OrientedBB *> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::vector<OrientedBB *> *>(sipSrc);
}


extern "C" {static void *array_std_vector_0101OrientedBB(SIP_SSIZE_T);}
static void *array_std_vector_0101OrientedBB(SIP_SSIZE_T sipNrElem)
{
    return new std::vector<OrientedBB *>[sipNrElem];
}


extern "C" {static void *copy_std_vector_0101OrientedBB(const void *, SIP_SSIZE_T);}
static void *copy_std_vector_0101OrientedBB(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::vector<OrientedBB *>(reinterpret_cast<const std::vector<OrientedBB *> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_vector_0101OrientedBB(void *, int);}
static void release_std_vector_0101OrientedBB(void *ptr, int)
{
    delete reinterpret_cast<std::vector<OrientedBB *> *>(ptr);
}



extern "C" {static int convertTo_std_vector_0101OrientedBB(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_vector_0101OrientedBB(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::vector<OrientedBB *> **sipCppPtr = reinterpret_cast<std::vector<OrientedBB *> **>(sipCppPtrV);

#line 516 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    // See if we are just being asked to check the type of the Python
    // object.
    if (sipIsErr == NULL)
    {
        // Check it is a list.
        if (!PyList_Check(sipPy))
            return 0;

        // Now check each element of the list is of the type we expect.
        // The template is for a pointer type so we don't disallow None.
        for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i),
                                         sipClass_OrientedBB, 0))
                return 0;

        return 1;
    }

    // Create the instance on the heap.
    std::vector<OrientedBB *> *ql = new std::vector<OrientedBB *>;

    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        // Use the SIP API to convert the Python object to the
        // corresponding C++ instance.  Note that we apply any ownership
        // transfer to the list itself, not the individual elements.
        OrientedBB *t = reinterpret_cast<OrientedBB *>(sipConvertToInstance(
                                            PyList_GET_ITEM(sipPy, i),
                                            sipClass_OrientedBB, 0, 0, 0,
                                            sipIsErr));

        if (*sipIsErr)
        {
            // Tidy up.
            delete ql;

            // There is nothing on the heap.
            return 0;
        }

        // Add the pointer to the C++ instance.
        ql -> push_back(t);
    }

    // Return the instance on the heap.
    *sipCppPtr = ql;

    // Apply the normal transfer.
    return sipGetState(sipTransferObj);
#line 101 "sip_geo2dcppstdvector0101OrientedBB.cpp"
}


extern "C" {static PyObject *convertFrom_std_vector_0101OrientedBB(void *, PyObject *);}
static PyObject *convertFrom_std_vector_0101OrientedBB(void *sipCppV,PyObject *sipTransferObj)
{
   std::vector<OrientedBB *> *sipCpp = reinterpret_cast<std::vector<OrientedBB *> *>(sipCppV);

#line 568 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    PyObject *l;

    // Create the Python list of the correct length.
    if ((l = PyList_New(sipCpp -> size())) == NULL)
        return NULL;

    // Go through each element in the C++ instance and convert it to the
    // corresponding Python object.
    for (std::vector<OrientedBB *>::size_type i = 0; i < sipCpp -> size(); ++i)
    {
        OrientedBB *t = sipCpp -> at(i);
        PyObject *tobj;

        if ((tobj = sipConvertFromInstance(t, sipClass_OrientedBB, sipTransferObj)) == NULL)
        {
            // There was an error so garbage collect the Python list.
            Py_DECREF(l);
            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    // Return the Python list.
    return l;
#line 136 "sip_geo2dcppstdvector0101OrientedBB.cpp"
}


sipMappedTypeDef sipTypeDef__geo2dcpp_std_vector_0101OrientedBB = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_278,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_vector_0101OrientedBB,
    array_std_vector_0101OrientedBB,
    copy_std_vector_0101OrientedBB,
    release_std_vector_0101OrientedBB,
    convertTo_std_vector_0101OrientedBB,
    convertFrom_std_vector_0101OrientedBB
};
