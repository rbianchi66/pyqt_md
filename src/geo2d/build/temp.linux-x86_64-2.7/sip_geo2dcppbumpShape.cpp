/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppbumpShape.cpp"


extern "C" {static PyObject *meth_bump_Shape_merge(PyObject *, PyObject *);}
static PyObject *meth_bump_Shape_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const bump::Shape * a0;
        bump::PosRot * a1;
        bump::Shape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_bump_Shape, &sipCpp, sipType_bump_Shape, &a0, sipType_bump_PosRot, &a1))
        {
            sipCpp->merge(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Shape, sipName_merge, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bump_Shape_net(PyObject *, PyObject *);}
static PyObject *meth_bump_Shape_net(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bump::Shape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bump_Shape, &sipCpp))
        {
            std::vector<Path2d> *sipRes;

            sipRes = new std::vector<Path2d>(sipCpp->net());

            return sipConvertFromNewType(sipRes,sipType_std_vector_0100Path2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Shape, sipName_net, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bump_Shape_bump(PyObject *, PyObject *);}
static PyObject *meth_bump_Shape_bump(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bump::Shape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bump_Shape, &sipCpp))
        {
            std::vector<Path2d> *sipRes;

            sipRes = new std::vector<Path2d>(sipCpp->bump());

            return sipConvertFromNewType(sipRes,sipType_std_vector_0100Path2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Shape, sipName_bump, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_bump_Shape(void *, const sipTypeDef *);}
static void *cast_bump_Shape(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_bump_Shape)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_bump_Shape(void *, int);}
static void release_bump_Shape(void *sipCppV,int)
{
    delete reinterpret_cast<bump::Shape *>(sipCppV);
}


extern "C" {static void assign_bump_Shape(void *, SIP_SSIZE_T, const void *);}
static void assign_bump_Shape(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<bump::Shape *>(sipDst)[sipDstIdx] = *reinterpret_cast<const bump::Shape *>(sipSrc);
}


extern "C" {static void *array_bump_Shape(SIP_SSIZE_T);}
static void *array_bump_Shape(SIP_SSIZE_T sipNrElem)
{
    return new bump::Shape[sipNrElem];
}


extern "C" {static void *copy_bump_Shape(const void *, SIP_SSIZE_T);}
static void *copy_bump_Shape(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new bump::Shape(reinterpret_cast<const bump::Shape *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_bump_Shape(sipSimpleWrapper *);}
static void dealloc_bump_Shape(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_bump_Shape(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_bump_Shape(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_bump_Shape(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    bump::Shape *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new bump::Shape();

            return sipCpp;
        }
    }

    {
        std::vector<Path2d> * a0;
        int a0State = 0;
        std::vector<Path2d> * a1;
        int a1State = 0;
        double a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1d", sipType_std_vector_0100Path2d,&a0, &a0State, sipType_std_vector_0100Path2d,&a1, &a1State, &a2))
        {
            sipCpp = new bump::Shape(*a0,*a1,a2);
            sipReleaseType(a0,sipType_std_vector_0100Path2d,a0State);
            sipReleaseType(a1,sipType_std_vector_0100Path2d,a1State);

            return sipCpp;
        }
    }

    {
        const bump::Shape * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_bump_Shape, &a0))
        {
            sipCpp = new bump::Shape(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_bump_Shape[] = {
    {SIP_MLNAME_CAST(sipName_bump), meth_bump_Shape_bump, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_merge), meth_bump_Shape_merge, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_net), meth_bump_Shape_net, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_bump_Shape = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_bump__Shape,
        {0}
    },
    {
        sipNameNr_Shape,
        {18, 255, 0},
        3, methods_bump_Shape,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_bump_Shape,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_bump_Shape,
    assign_bump_Shape,
    array_bump_Shape,
    copy_bump_Shape,
    release_bump_Shape,
    cast_bump_Shape,
    0,
    0,
    0
};
