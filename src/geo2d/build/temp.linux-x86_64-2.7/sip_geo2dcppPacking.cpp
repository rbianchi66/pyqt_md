/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Packing(void *, const sipTypeDef *);}
static void *cast_Packing(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Packing)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Packing(void *, int);}
static void release_Packing(void *sipCppV,int)
{
    delete reinterpret_cast<Packing *>(sipCppV);
}


extern "C" {static void assign_Packing(void *, SIP_SSIZE_T, const void *);}
static void assign_Packing(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Packing *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Packing *>(sipSrc);
}


extern "C" {static void *array_Packing(SIP_SSIZE_T);}
static void *array_Packing(SIP_SSIZE_T sipNrElem)
{
    return new Packing[sipNrElem];
}


extern "C" {static void *copy_Packing(const void *, SIP_SSIZE_T);}
static void *copy_Packing(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Packing(reinterpret_cast<const Packing *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Packing(sipSimpleWrapper *);}
static void dealloc_Packing(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Packing(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Packing(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Packing(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Packing *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new Packing();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        X2d * a2;
        X2d * a3;
        double a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iiJ9J9d", &a0, &a1, sipType_X2d, &a2, sipType_X2d, &a3, &a4))
        {
            sipCpp = new Packing(a0,a1,*a2,*a3,a4);

            return sipCpp;
        }
    }

    {
        const Packing * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Packing, &a0))
        {
            sipCpp = new Packing(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_Packing_id1(void *, PyObject *);}
static PyObject *varget_Packing_id1(void *sipSelf, PyObject *)
{
    int sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = sipCpp->id1;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_Packing_id1(void *, PyObject *, PyObject *);}
static int varset_Packing_id1(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->id1 = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Packing_id2(void *, PyObject *);}
static PyObject *varget_Packing_id2(void *sipSelf, PyObject *)
{
    int sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = sipCpp->id2;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_Packing_id2(void *, PyObject *, PyObject *);}
static int varset_Packing_id2(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->id2 = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Packing_score(void *, PyObject *);}
static PyObject *varget_Packing_score(void *sipSelf, PyObject *)
{
    double sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = sipCpp->score;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_Packing_score(void *, PyObject *, PyObject *);}
static int varset_Packing_score(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->score = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Packing_x1(void *, PyObject *);}
static PyObject *varget_Packing_x1(void *sipSelf, PyObject *)
{
    X2d *sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = &sipCpp->x1;

    return sipConvertFromType(sipVal,sipType_X2d, NULL);
}


extern "C" {static int varset_Packing_x1(void *, PyObject *, PyObject *);}
static int varset_Packing_x1(void *sipSelf, PyObject *sipPy, PyObject *)
{
    X2d *sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<X2d *>(sipForceConvertToType(sipPy,sipType_X2d,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->x1 = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Packing_x2(void *, PyObject *);}
static PyObject *varget_Packing_x2(void *sipSelf, PyObject *)
{
    X2d *sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    sipVal = &sipCpp->x2;

    return sipConvertFromType(sipVal,sipType_X2d, NULL);
}


extern "C" {static int varset_Packing_x2(void *, PyObject *, PyObject *);}
static int varset_Packing_x2(void *sipSelf, PyObject *sipPy, PyObject *)
{
    X2d *sipVal;
    Packing *sipCpp = reinterpret_cast<Packing *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<X2d *>(sipForceConvertToType(sipPy,sipType_X2d,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->x2 = *sipVal;

    return 0;
}

sipVariableDef variables_Packing[] = {
    {sipName_id1, varget_Packing_id1, varset_Packing_id1, 0},
    {sipName_id2, varget_Packing_id2, varset_Packing_id2, 0},
    {sipName_score, varget_Packing_score, varset_Packing_score, 0},
    {sipName_x1, varget_Packing_x1, varset_Packing_x1, 0},
    {sipName_x2, varget_Packing_x2, varset_Packing_x2, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_Packing = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Packing,
        {0}
    },
    {
        sipNameNr_Packing,
        {0, 0, 1},
        0, 0,
        0, 0,
        5, variables_Packing,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_Packing,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Packing,
    assign_Packing,
    array_Packing,
    copy_Packing,
    release_Packing,
    cast_Packing,
    0,
    0,
    0
};
