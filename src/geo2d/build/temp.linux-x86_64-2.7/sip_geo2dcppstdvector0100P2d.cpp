/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"

#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 12 "sip_geo2dcppstdvector0100P2d.cpp"



extern "C" {static void assign_std_vector_0100P2d(void *, SIP_SSIZE_T, const void *);}
static void assign_std_vector_0100P2d(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::vector<P2d> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::vector<P2d> *>(sipSrc);
}


extern "C" {static void *array_std_vector_0100P2d(SIP_SSIZE_T);}
static void *array_std_vector_0100P2d(SIP_SSIZE_T sipNrElem)
{
    return new std::vector<P2d>[sipNrElem];
}


extern "C" {static void *copy_std_vector_0100P2d(const void *, SIP_SSIZE_T);}
static void *copy_std_vector_0100P2d(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::vector<P2d>(reinterpret_cast<const std::vector<P2d> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_vector_0100P2d(void *, int);}
static void release_std_vector_0100P2d(void *ptr, int)
{
    delete reinterpret_cast<std::vector<P2d> *>(ptr);
}



extern "C" {static int convertTo_std_vector_0100P2d(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_vector_0100P2d(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::vector<P2d> **sipCppPtr = reinterpret_cast<std::vector<P2d> **>(sipCppPtrV);

#line 55 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    // Check the type of the Python object. We check that the type is
    // iterable and that the first element (if any) can be converted to
    // the correct type.
    const sipTypeDef* smt = sipFindType("P2d");
    
    if (sipIsErr == NULL)
    {
        // Must be any iterable
        PyObject *i = PyObject_GetIter(sipPy);
        if (i == NULL)
            return false;
        // Make sure that we don't consume the original
        // sequence if it is already an iterator, otherwise we might
        // be missing an item later.
        if (i == sipPy)
        {
            Py_DECREF(i);
            return true;
        }
        PyObject *item = PyIter_Next(i);
        bool convertible = !item || sipCanConvertToType(item, smt, SIP_NOT_NONE);
        Py_DECREF(i);
        Py_XDECREF(item);
        return convertible;
    }

    // Itera sull'oggetto
    PyObject *iterator = PyObject_GetIter(sipPy);
    PyObject *item;

    std::vector<P2d> *V = new std::vector<P2d>();

    while ((item = PyIter_Next(iterator)))
    {
        if (!sipCanConvertToType(item, smt, SIP_NOT_NONE))
        {
            PyErr_Format(PyExc_TypeError, "object in iterable cannot be converted to P2d");
            *sipIsErr = 1;
            break;
        }

        int state;
        P2d* p = reinterpret_cast<P2d*>(
             sipConvertToType(item, smt, 0, SIP_NOT_NONE, &state, sipIsErr));

        if (!*sipIsErr)
            V->push_back(*p);

        sipReleaseType(p, smt, state);
        Py_DECREF(item);
    }

    Py_DECREF(iterator);

    if (*sipIsErr)
    {
        delete V;
        return 0;
    }

    *sipCppPtr = V;
    return sipGetState(sipTransferObj);
#line 114 "sip_geo2dcppstdvector0100P2d.cpp"
}


extern "C" {static PyObject *convertFrom_std_vector_0100P2d(void *, PyObject *);}
static PyObject *convertFrom_std_vector_0100P2d(void *sipCppV,PyObject *sipTransferObj)
{
   std::vector<P2d> *sipCpp = reinterpret_cast<std::vector<P2d> *>(sipCppV);

#line 18 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
    PyObject *l;

    // Create the Python list of the correct length.
    if ((l = PyList_New(sipCpp -> size())) == NULL)
        return NULL;

    const sipTypeDef* smt = sipFindType("P2d");
    
    if (smt == NULL)
    {
        PyErr_Format(PyExc_TypeError, "No SIP mapped type found for P2d");
        return NULL;
    }
    
    // Go through each element in the C++ instance and convert it to a
    // wrapped P2d.
    for (std::vector<P2d>::size_type i = 0; i < sipCpp -> size(); ++i)
    {
        P2d *cpp = new P2d(sipCpp -> at(i));
        PyObject *pobj;

        if ((pobj = sipConvertFromNewType(cpp, smt, sipTransferObj)) == NULL)
        {
            // There was an error so garbage collect the Python list.
            Py_DECREF(l);
            return NULL;
        }

        // Add the wrapper to the list.
        PyList_SET_ITEM(l, i, pobj);
    }

    // Return the Python list.
    return l;
#line 158 "sip_geo2dcppstdvector0100P2d.cpp"
}


sipMappedTypeDef sipTypeDef__geo2dcpp_std_vector_0100P2d = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_521,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_vector_0100P2d,
    array_std_vector_0100P2d,
    copy_std_vector_0100P2d,
    release_std_vector_0100P2d,
    convertTo_std_vector_0100P2d,
    convertFrom_std_vector_0100P2d
};
