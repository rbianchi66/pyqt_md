/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Defect(void *, const sipTypeDef *);}
static void *cast_Defect(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Defect)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Defect(void *, int);}
static void release_Defect(void *sipCppV,int)
{
    delete reinterpret_cast<Defect *>(sipCppV);
}


extern "C" {static void dealloc_Defect(sipSimpleWrapper *);}
static void dealloc_Defect(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Defect(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Defect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_Defect(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Defect *sipCpp = 0;

    {
        int a0;
        const Path2d * a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iJ9i", &a0, sipType_Path2d, &a1, &a2))
        {
            sipCpp = new Defect(a0,*a1,a2);

            return sipCpp;
        }
    }

    {
        const Defect * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Defect, &a0))
        {
            sipCpp = new Defect(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_Defect_p(void *, PyObject *);}
static PyObject *varget_Defect_p(void *sipSelf, PyObject *)
{
    Path2d *sipVal;
    Defect *sipCpp = reinterpret_cast<Defect *>(sipSelf);

    sipVal = &sipCpp->p;

    return sipConvertFromType(sipVal,sipType_Path2d, NULL);
}


extern "C" {static int varset_Defect_p(void *, PyObject *, PyObject *);}
static int varset_Defect_p(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Path2d *sipVal;
    Defect *sipCpp = reinterpret_cast<Defect *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Path2d *>(sipForceConvertToType(sipPy,sipType_Path2d,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->p = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Defect_q(void *, PyObject *);}
static PyObject *varget_Defect_q(void *sipSelf, PyObject *)
{
    int sipVal;
    Defect *sipCpp = reinterpret_cast<Defect *>(sipSelf);

    sipVal = sipCpp->q;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_Defect_q(void *, PyObject *, PyObject *);}
static int varset_Defect_q(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    Defect *sipCpp = reinterpret_cast<Defect *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->q = sipVal;

    return 0;
}

sipVariableDef variables_Defect[] = {
    {sipName_p, varget_Defect_p, varset_Defect_p, 0},
    {sipName_q, varget_Defect_q, varset_Defect_q, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_Defect = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Defect,
        {0}
    },
    {
        sipNameNr_Defect,
        {0, 0, 1},
        0, 0,
        0, 0,
        2, variables_Defect,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_Defect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Defect,
    0,
    0,
    0,
    release_Defect,
    cast_Defect,
    0,
    0,
    0
};
