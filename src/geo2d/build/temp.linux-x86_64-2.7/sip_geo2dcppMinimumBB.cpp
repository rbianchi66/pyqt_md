/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppMinimumBB.cpp"


extern "C" {static PyObject *meth_MinimumBB_getRect(PyObject *, PyObject *);}
static PyObject *meth_MinimumBB_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        P2d * a0;
        P2d * a1;
        P2d * a2;
        P2d * a3;
        MinimumBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MinimumBB, &sipCpp))
        {
            a0 = new P2d();
            a1 = new P2d();
            a2 = new P2d();
            a3 = new P2d();

            sipCpp->getRect(a0,a1,a2,a3);

            return sipBuildResult(0,"(NNNN)",a0,sipType_P2d,NULL,a1,sipType_P2d,NULL,a2,sipType_P2d,NULL,a3,sipType_P2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MinimumBB, sipName_getRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MinimumBB_bestAngle(PyObject *, PyObject *);}
static PyObject *meth_MinimumBB_bestAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        MinimumBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MinimumBB, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->bestAngle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MinimumBB, sipName_bestAngle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MinimumBB_test(PyObject *, PyObject *);}
static PyObject *meth_MinimumBB_test(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        P2d * a0;
        MinimumBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_MinimumBB, &sipCpp, sipType_P2d, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->test(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MinimumBB, sipName_test, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MinimumBB_center(PyObject *, PyObject *);}
static PyObject *meth_MinimumBB_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        MinimumBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MinimumBB, &sipCpp))
        {
            P2d *sipRes;

            sipRes = new P2d(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_P2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MinimumBB, sipName_center, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_MinimumBB(void *, const sipTypeDef *);}
static void *cast_MinimumBB(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_MinimumBB)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_MinimumBB(void *, int);}
static void release_MinimumBB(void *sipCppV,int)
{
    delete reinterpret_cast<MinimumBB *>(sipCppV);
}


extern "C" {static void dealloc_MinimumBB(sipSimpleWrapper *);}
static void dealloc_MinimumBB(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_MinimumBB(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_MinimumBB(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_MinimumBB(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    MinimumBB *sipCpp = 0;

    {
        const std::vector<P2d> * a0;
        int a0State = 0;
        int a1 = 1;
        double a2 = 0;
        bool a3 = 1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|idb", sipType_std_vector_0100P2d,&a0, &a0State, &a1, &a2, &a3))
        {
            sipCpp = new MinimumBB(*a0,a1,a2,a3);
            sipReleaseType(const_cast<std::vector<P2d> *>(a0),sipType_std_vector_0100P2d,a0State);

            return sipCpp;
        }
    }

    {
        const MinimumBB * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_MinimumBB, &a0))
        {
            sipCpp = new MinimumBB(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_MinimumBB[] = {
    {SIP_MLNAME_CAST(sipName_bestAngle), meth_MinimumBB_bestAngle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_center), meth_MinimumBB_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRect), meth_MinimumBB_getRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_test), meth_MinimumBB_test, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_MinimumBB = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_MinimumBB,
        {0}
    },
    {
        sipNameNr_MinimumBB,
        {0, 0, 1},
        4, methods_MinimumBB,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_MinimumBB,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_MinimumBB,
    0,
    0,
    0,
    release_MinimumBB,
    cast_MinimumBB,
    0,
    0,
    0
};
