/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 93 "sip/geo2dx.sip"
    // Ritorna il pyobject di un numero double
    static PyObject* fromDouble(double val, PyObject* decMe)
    {
        PyObject* po = PyFloat_FromDouble(val);
        if (po == NULL)
        {
            Py_DECREF(decMe);
        }
        return po;
    }
#line 22 "sip_geo2dcppX2d.cpp"


extern "C" {static PyObject *meth_X2d_rot(PyObject *, PyObject *);}
static PyObject *meth_X2d_rot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_X2d, &sipCpp))
        {
            X2d *sipRes = 0;

#line 50 "sip/geo2dx.sip"
    // Torna la componente di rotazione di questa matrice
    sipRes = new X2d(sipCpp->a, sipCpp->b, P2d(0.0, 0.0));
#line 40 "sip_geo2dcppX2d.cpp"

            return sipConvertFromNewType(sipRes,sipType_X2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_X, sipName_rot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_X2d_xlate(PyObject *, PyObject *);}
static PyObject *meth_X2d_xlate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_X2d, &sipCpp))
        {
            X2d *sipRes = 0;

#line 56 "sip/geo2dx.sip"
    // Torna la componente di traslazione di questa matrice
    sipRes = new X2d(P2d(0.0, 0.0), P2d(0.0, 0.0), sipCpp->c);
#line 68 "sip_geo2dcppX2d.cpp"

            return sipConvertFromNewType(sipRes,sipType_X2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_X, sipName_xlate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_X2d_isMirror(PyObject *, PyObject *);}
static PyObject *meth_X2d_isMirror(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_X2d, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMirror();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_X, sipName_isMirror, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_X2d_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_X2d_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_X2d, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_X, sipName_isIdentity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_X2d_toGL(PyObject *, PyObject *);}
static PyObject *meth_X2d_toGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        void * a0;
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_X2d, &sipCpp, &a0))
        {
            sipCpp->toGL(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        X2d *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_X2d, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 112 "sip/geo2dx.sip"
    PyObject* list = PyList_New(16);
    PyObject* po;

    if (list == NULL)
        return NULL;

    //
    po = fromDouble(sipCpp->a.x, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 0, po);

    po = fromDouble(sipCpp->a.y, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 1, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 2, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 3, po);

    // ---
    po = fromDouble(sipCpp->b.x, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 4, po);

    po = fromDouble(sipCpp->b.y, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 5, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 6, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 7, po);

    // ---
    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 8, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 9, po);

    po = fromDouble(1.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 10, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 11, po);

    // ---
    po = fromDouble(sipCpp->c.x, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 12, po);

    po = fromDouble(sipCpp->c.y, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 13, po);

    po = fromDouble(0.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 14, po);

    po = fromDouble(1.0, list);
    if (po == NULL) return NULL;
    PyList_SET_ITEM(list, 15, po);


    sipRes = list;

/*
        return [ self.a.x, self.a.y, 0, 0,
                 self.b.x, self.b.y, 0, 0,
                        0,        0, 1, 0,
                 self.c.x, self.c.y, 0, 1, ]
*/
#line 240 "sip_geo2dcppX2d.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_X, sipName_toGL, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_X2d___mul__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_X2d___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        X2d * a0;
        const X2d * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_X2d, &a0, sipType_X2d, &a1))
        {
            X2d *sipRes;

            sipRes = new X2d((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_X2d,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_X2d___div__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_X2d___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        X2d * a0;
        const X2d * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_X2d, &a0, sipType_X2d, &a1))
        {
            X2d *sipRes;

            sipRes = new X2d((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_X2d,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_X2d___repr__(PyObject *sipSelf);}
static PyObject *slot_X2d___repr__(PyObject *sipSelf)
{
    X2d *sipCpp = reinterpret_cast<X2d *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_X2d));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 62 "sip/geo2dx.sip"
    PyObject *sa = PyString_FromFormat("a");
    PyObject *sb = PyString_FromFormat("b");
    PyObject *sc = PyString_FromFormat("c");

    PyObject *pa = PyObject_GetAttr(sipSelf, sa);
    PyObject *pb = PyObject_GetAttr(sipSelf, sb);
    PyObject *pc = PyObject_GetAttr(sipSelf, sc);

    PyObject *ra = PyObject_Repr(pa);
    PyObject *rb = PyObject_Repr(pb);
    PyObject *rc = PyObject_Repr(pc);

    sipRes = PyString_FromFormat("X(%s, %s, %s)",
                                 PyString_AsString(ra),
                                 PyString_AsString(rb),
                                 PyString_AsString(rc));

    Py_DECREF(ra);
    Py_DECREF(rb);
    Py_DECREF(rc);

    Py_DECREF(pa);
    Py_DECREF(pb);
    Py_DECREF(pc);

    Py_DECREF(sa);
    Py_DECREF(sb);
    Py_DECREF(sc);
#line 351 "sip_geo2dcppX2d.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_X2d(void *, const sipTypeDef *);}
static void *cast_X2d(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_X2d)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_X2d(void *, int);}
static void release_X2d(void *sipCppV,int)
{
    delete reinterpret_cast<X2d *>(sipCppV);
}


extern "C" {static void assign_X2d(void *, SIP_SSIZE_T, const void *);}
static void assign_X2d(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<X2d *>(sipDst)[sipDstIdx] = *reinterpret_cast<const X2d *>(sipSrc);
}


extern "C" {static void *array_X2d(SIP_SSIZE_T);}
static void *array_X2d(SIP_SSIZE_T sipNrElem)
{
    return new X2d[sipNrElem];
}


extern "C" {static void *copy_X2d(const void *, SIP_SSIZE_T);}
static void *copy_X2d(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new X2d(reinterpret_cast<const X2d *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_X2d(sipSimpleWrapper *);}
static void dealloc_X2d(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_X2d(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_X2d(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_X2d(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    X2d *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new X2d();

            return sipCpp;
        }
    }

    {
        const P2d * a0;
        const P2d& a1def = P2d(0,1);
        const P2d * a1 = &a1def;
        const P2d& a2def = P2d(0,0);
        const P2d * a2 = &a2def;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9|J9J9", sipType_P2d, &a0, sipType_P2d, &a1, sipType_P2d, &a2))
        {
            sipCpp = new X2d(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    {
        const X2d * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_X2d, &a0))
        {
            sipCpp = new X2d(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_X2d[] = {
    {(void *)slot_X2d___mul__, mul_slot},
    {(void *)slot_X2d___div__, div_slot},
    {(void *)slot_X2d___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_X2d[] = {
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_X2d_isIdentity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isMirror), meth_X2d_isMirror, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rot), meth_X2d_rot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toGL), meth_X2d_toGL, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_xlate), meth_X2d_xlate, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_X2d_a(void *, PyObject *);}
static PyObject *varget_X2d_a(void *sipSelf, PyObject *)
{
    PyObject *sipPy;
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

#line 19 "sip/geo2dx.sip"
    sipPy = sipConvertFromType(new P2d(sipCpp->a), sipType_P2d, Py_None);
#line 479 "sip_geo2dcppX2d.cpp"

    return sipPy;
}


extern "C" {static int varset_X2d_a(void *, PyObject *, PyObject *);}
static int varset_X2d_a(void *sipSelf, PyObject *sipPy, PyObject *)
{
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

   int sipErr = 0;

#line 22 "sip/geo2dx.sip"
    sipErr = 1; (void)sipCpp;
    PyErr_SetString(PyExc_TypeError, "readonly attribute");
#line 495 "sip_geo2dcppX2d.cpp"

    return (sipErr ? -1 : 0);
}


extern "C" {static PyObject *varget_X2d_b(void *, PyObject *);}
static PyObject *varget_X2d_b(void *sipSelf, PyObject *)
{
    PyObject *sipPy;
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

#line 28 "sip/geo2dx.sip"
    sipPy = sipConvertFromType(new P2d(sipCpp->b), sipType_P2d, Py_None);
#line 509 "sip_geo2dcppX2d.cpp"

    return sipPy;
}


extern "C" {static int varset_X2d_b(void *, PyObject *, PyObject *);}
static int varset_X2d_b(void *sipSelf, PyObject *sipPy, PyObject *)
{
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

   int sipErr = 0;

#line 31 "sip/geo2dx.sip"
    sipErr = 1; (void)sipCpp;
    PyErr_SetString(PyExc_TypeError, "readonly attribute");
#line 525 "sip_geo2dcppX2d.cpp"

    return (sipErr ? -1 : 0);
}


extern "C" {static PyObject *varget_X2d_c(void *, PyObject *);}
static PyObject *varget_X2d_c(void *sipSelf, PyObject *)
{
    PyObject *sipPy;
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

#line 37 "sip/geo2dx.sip"
    sipPy = sipConvertFromType(new P2d(sipCpp->c), sipType_P2d, Py_None);
#line 539 "sip_geo2dcppX2d.cpp"

    return sipPy;
}


extern "C" {static int varset_X2d_c(void *, PyObject *, PyObject *);}
static int varset_X2d_c(void *sipSelf, PyObject *sipPy, PyObject *)
{
    X2d *sipCpp = reinterpret_cast<X2d *>(sipSelf);

   int sipErr = 0;

#line 40 "sip/geo2dx.sip"
    sipErr = 1; (void)sipCpp;
    PyErr_SetString(PyExc_TypeError, "readonly attribute");
#line 555 "sip_geo2dcppX2d.cpp"

    return (sipErr ? -1 : 0);
}

sipVariableDef variables_X2d[] = {
    {sipName_a, varget_X2d_a, varset_X2d_a, 0},
    {sipName_b, varget_X2d_b, varset_X2d_b, 0},
    {sipName_c, varget_X2d_c, varset_X2d_c, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_X2d = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_X2d,
        {0}
    },
    {
        sipNameNr_X,
        {0, 0, 1},
        5, methods_X2d,
        0, 0,
        3, variables_X2d,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_X2d,
    init_X2d,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_X2d,
    assign_X2d,
    array_X2d,
    copy_X2d,
    release_X2d,
    cast_X2d,
    0,
    0,
    0
};
