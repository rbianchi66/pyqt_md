/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_coveringRect(void *, const sipTypeDef *);}
static void *cast_coveringRect(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_coveringRect)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_coveringRect(void *, int);}
static void release_coveringRect(void *sipCppV,int)
{
    delete reinterpret_cast<coveringRect *>(sipCppV);
}


extern "C" {static void assign_coveringRect(void *, SIP_SSIZE_T, const void *);}
static void assign_coveringRect(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<coveringRect *>(sipDst)[sipDstIdx] = *reinterpret_cast<const coveringRect *>(sipSrc);
}


extern "C" {static void *array_coveringRect(SIP_SSIZE_T);}
static void *array_coveringRect(SIP_SSIZE_T sipNrElem)
{
    return new coveringRect[sipNrElem];
}


extern "C" {static void *copy_coveringRect(const void *, SIP_SSIZE_T);}
static void *copy_coveringRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new coveringRect(reinterpret_cast<const coveringRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_coveringRect(sipSimpleWrapper *);}
static void dealloc_coveringRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_coveringRect(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_coveringRect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_coveringRect(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    coveringRect *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new coveringRect();

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        double a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            sipCpp = new coveringRect(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const coveringRect * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_coveringRect, &a0))
        {
            sipCpp = new coveringRect(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_coveringRect_h(void *, PyObject *);}
static PyObject *varget_coveringRect_h(void *sipSelf, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = sipCpp->h;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_coveringRect_h(void *, PyObject *, PyObject *);}
static int varset_coveringRect_h(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->h = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_coveringRect_w(void *, PyObject *);}
static PyObject *varget_coveringRect_w(void *sipSelf, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = sipCpp->w;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_coveringRect_w(void *, PyObject *, PyObject *);}
static int varset_coveringRect_w(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->w = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_coveringRect_x(void *, PyObject *);}
static PyObject *varget_coveringRect_x(void *sipSelf, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_coveringRect_x(void *, PyObject *, PyObject *);}
static int varset_coveringRect_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_coveringRect_y(void *, PyObject *);}
static PyObject *varget_coveringRect_y(void *sipSelf, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_coveringRect_y(void *, PyObject *, PyObject *);}
static int varset_coveringRect_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    coveringRect *sipCpp = reinterpret_cast<coveringRect *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_coveringRect[] = {
    {sipName_h, varget_coveringRect_h, varset_coveringRect_h, 0},
    {sipName_w, varget_coveringRect_w, varset_coveringRect_w, 0},
    {sipName_x, varget_coveringRect_x, varset_coveringRect_x, 0},
    {sipName_y, varget_coveringRect_y, varset_coveringRect_y, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_coveringRect = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_coveringRect,
        {0}
    },
    {
        sipNameNr_coveringRect,
        {0, 0, 1},
        0, 0,
        0, 0,
        4, variables_coveringRect,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_coveringRect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_coveringRect,
    assign_coveringRect,
    array_coveringRect,
    copy_coveringRect,
    release_coveringRect,
    cast_coveringRect,
    0,
    0,
    0
};
