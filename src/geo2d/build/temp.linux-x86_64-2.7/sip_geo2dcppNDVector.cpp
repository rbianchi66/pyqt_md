/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




extern "C" {static PyObject *meth_NDVector_size(PyObject *, PyObject *);}
static PyObject *meth_NDVector_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        NDVector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_NDVector, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NDVector, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_NDVector___add__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_NDVector___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        NDVector * a0;
        const NDVector * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_NDVector, &a0, sipType_NDVector, &a1))
        {
            NDVector *sipRes;

            sipRes = new NDVector((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_NDVector___sub__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_NDVector___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        NDVector * a0;
        const NDVector * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_NDVector, &a0, sipType_NDVector, &a1))
        {
            NDVector *sipRes;

            sipRes = new NDVector((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_NDVector___mul__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_NDVector___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        NDVector * a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_NDVector, &a0, &a1))
        {
            NDVector *sipRes;

            sipRes = new NDVector((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    {
        double a0;
        NDVector * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_NDVector, &a1))
        {
            NDVector *sipRes;

            sipRes = new NDVector((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    {
        const NDVector * a0;
        const NDVector * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_NDVector, &a0, sipType_NDVector, &a1))
        {
            double sipRes;

            sipRes = (*a0 * *a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_NDVector___div__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_NDVector___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        NDVector * a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_NDVector, &a0, &a1))
        {
            NDVector *sipRes;

            sipRes = new NDVector((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__geo2dcpp,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_NDVector___idiv__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_NDVector___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_NDVector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    NDVector *sipCpp = reinterpret_cast<NDVector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_NDVector));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->NDVector::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_NDVector___imul__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_NDVector___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_NDVector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    NDVector *sipCpp = reinterpret_cast<NDVector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_NDVector));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->NDVector::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_NDVector___isub__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_NDVector___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_NDVector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    NDVector *sipCpp = reinterpret_cast<NDVector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_NDVector));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const NDVector * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_NDVector, &a0))
        {
            sipCpp->NDVector::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_NDVector___iadd__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_NDVector___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_NDVector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    NDVector *sipCpp = reinterpret_cast<NDVector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_NDVector));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const NDVector * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_NDVector, &a0))
        {
            sipCpp->NDVector::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_NDVector___getitem__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_NDVector___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    NDVector *sipCpp = reinterpret_cast<NDVector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_NDVector));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes;

            sipRes = (*sipCpp)[a0];

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NDVector, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_NDVector(void *, const sipTypeDef *);}
static void *cast_NDVector(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_NDVector)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_NDVector(void *, int);}
static void release_NDVector(void *sipCppV,int)
{
    delete reinterpret_cast<NDVector *>(sipCppV);
}


extern "C" {static void assign_NDVector(void *, SIP_SSIZE_T, const void *);}
static void assign_NDVector(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<NDVector *>(sipDst)[sipDstIdx] = *reinterpret_cast<const NDVector *>(sipSrc);
}


extern "C" {static void *array_NDVector(SIP_SSIZE_T);}
static void *array_NDVector(SIP_SSIZE_T sipNrElem)
{
    return new NDVector[sipNrElem];
}


extern "C" {static void *copy_NDVector(const void *, SIP_SSIZE_T);}
static void *copy_NDVector(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new NDVector(reinterpret_cast<const NDVector *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_NDVector(sipSimpleWrapper *);}
static void dealloc_NDVector(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_NDVector(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_NDVector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_NDVector(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    NDVector *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new NDVector();

            return sipCpp;
        }
    }

    {
        const NDVector * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_NDVector, &a0))
        {
            sipCpp = new NDVector(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_NDVector[] = {
    {(void *)slot_NDVector___add__, add_slot},
    {(void *)slot_NDVector___sub__, sub_slot},
    {(void *)slot_NDVector___mul__, mul_slot},
    {(void *)slot_NDVector___div__, div_slot},
    {(void *)slot_NDVector___idiv__, idiv_slot},
    {(void *)slot_NDVector___imul__, imul_slot},
    {(void *)slot_NDVector___isub__, isub_slot},
    {(void *)slot_NDVector___iadd__, iadd_slot},
    {(void *)slot_NDVector___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_NDVector[] = {
    {SIP_MLNAME_CAST(sipName_size), meth_NDVector_size, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_NDVector = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_NDVector,
        {0}
    },
    {
        sipNameNr_NDVector,
        {0, 0, 1},
        1, methods_NDVector,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_NDVector,
    init_NDVector,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_NDVector,
    assign_NDVector,
    array_NDVector,
    copy_NDVector,
    release_NDVector,
    cast_NDVector,
    0,
    0,
    0
};
