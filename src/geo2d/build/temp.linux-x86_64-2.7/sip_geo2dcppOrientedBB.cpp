/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppOrientedBB.cpp"
#line 512 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 16 "sip_geo2dcppOrientedBB.cpp"


extern "C" {static PyObject *meth_OrientedBB_test(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_test(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const P2d * a0;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_OrientedBB, &sipCpp, sipType_P2d, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->test(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_test, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_xsect(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_xsect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const OrientedBB * a0;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_OrientedBB, &sipCpp, sipType_OrientedBB, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->xsect(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_xsect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_contains(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const OrientedBB * a0;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_OrientedBB, &sipCpp, sipType_OrientedBB, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_contains, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_merge(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<OrientedBB *> * a0;
        int a0State = 0;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_OrientedBB, &sipCpp, sipType_std_vector_0101OrientedBB,&a0, &a0State))
        {
            sipCpp->merge(*a0);
            sipReleaseType(const_cast<std::vector<OrientedBB *> *>(a0),sipType_std_vector_0101OrientedBB,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_merge, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_getArea(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_getArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_OrientedBB, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getArea();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_getArea, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_getAngle(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_getAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_OrientedBB, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getAngle();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_getAngle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_rotate(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_OrientedBB, &sipCpp, &a0))
        {
            sipCpp->rotate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_rotate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_OrientedBB_getRect(PyObject *, PyObject *);}
static PyObject *meth_OrientedBB_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        P2d * a0;
        P2d * a1;
        P2d * a2;
        P2d * a3;
        OrientedBB *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_OrientedBB, &sipCpp))
        {
            a0 = new P2d();
            a1 = new P2d();
            a2 = new P2d();
            a3 = new P2d();

            sipCpp->getRect(a0,a1,a2,a3);

            return sipBuildResult(0,"(NNNN)",a0,sipType_P2d,NULL,a1,sipType_P2d,NULL,a2,sipType_P2d,NULL,a3,sipType_P2d,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_OrientedBB, sipName_getRect, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_OrientedBB(void *, const sipTypeDef *);}
static void *cast_OrientedBB(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_OrientedBB)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_OrientedBB(void *, int);}
static void release_OrientedBB(void *sipCppV,int)
{
    delete reinterpret_cast<OrientedBB *>(sipCppV);
}


extern "C" {static void dealloc_OrientedBB(sipSimpleWrapper *);}
static void dealloc_OrientedBB(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_OrientedBB(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_OrientedBB(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_OrientedBB(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    OrientedBB *sipCpp = 0;

    {
        const std::vector<P2d> * a0;
        int a0State = 0;
        double a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1d", sipType_std_vector_0100P2d,&a0, &a0State, &a1))
        {
            sipCpp = new OrientedBB(*a0,a1);
            sipReleaseType(const_cast<std::vector<P2d> *>(a0),sipType_std_vector_0100P2d,a0State);

            return sipCpp;
        }
    }

    {
        const std::vector<OrientedBB *> * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_std_vector_0101OrientedBB,&a0, &a0State))
        {
            sipCpp = new OrientedBB(*a0);
            sipReleaseType(const_cast<std::vector<OrientedBB *> *>(a0),sipType_std_vector_0101OrientedBB,a0State);

            return sipCpp;
        }
    }

    {
        const OrientedBB * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_OrientedBB, &a0))
        {
            sipCpp = new OrientedBB(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_OrientedBB[] = {
    {SIP_MLNAME_CAST(sipName_contains), meth_OrientedBB_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getAngle), meth_OrientedBB_getAngle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getArea), meth_OrientedBB_getArea, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRect), meth_OrientedBB_getRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_merge), meth_OrientedBB_merge, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate), meth_OrientedBB_rotate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_test), meth_OrientedBB_test, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_xsect), meth_OrientedBB_xsect, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_OrientedBB = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_OrientedBB,
        {0}
    },
    {
        sipNameNr_OrientedBB,
        {0, 0, 1},
        8, methods_OrientedBB,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_OrientedBB,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_OrientedBB,
    0,
    0,
    0,
    release_OrientedBB,
    cast_OrientedBB,
    0,
    0,
    0
};
