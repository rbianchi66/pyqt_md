/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"




extern "C" {static PyObject *meth_MLBSplineInterpolator_clear(PyObject *, PyObject *);}
static PyObject *meth_MLBSplineInterpolator_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        MLBSplineInterpolator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MLBSplineInterpolator, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MLBSplineInterpolator, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MLBSplineInterpolator_addPoint(PyObject *, PyObject *);}
static PyObject *meth_MLBSplineInterpolator_addPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const NDVector * a0;
        const NDVector * a1;
        MLBSplineInterpolator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_MLBSplineInterpolator, &sipCpp, sipType_NDVector, &a0, sipType_NDVector, &a1))
        {
            sipCpp->addPoint(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MLBSplineInterpolator, sipName_addPoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MLBSplineInterpolator_calc(PyObject *, PyObject *);}
static PyObject *meth_MLBSplineInterpolator_calc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const NDVector * a0;
        MLBSplineInterpolator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_MLBSplineInterpolator, &sipCpp, sipType_NDVector, &a0))
        {
            NDVector *sipRes;

            sipRes = new NDVector(sipCpp->calc(*a0));

            return sipConvertFromNewType(sipRes,sipType_NDVector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MLBSplineInterpolator, sipName_calc, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_MLBSplineInterpolator(void *, const sipTypeDef *);}
static void *cast_MLBSplineInterpolator(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_MLBSplineInterpolator)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_MLBSplineInterpolator(void *, int);}
static void release_MLBSplineInterpolator(void *sipCppV,int)
{
    delete reinterpret_cast<MLBSplineInterpolator *>(sipCppV);
}


extern "C" {static void dealloc_MLBSplineInterpolator(sipSimpleWrapper *);}
static void dealloc_MLBSplineInterpolator(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_MLBSplineInterpolator(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_MLBSplineInterpolator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_MLBSplineInterpolator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    MLBSplineInterpolator *sipCpp = 0;

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            sipCpp = new MLBSplineInterpolator(a0);

            return sipCpp;
        }
    }

    {
        const MLBSplineInterpolator * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_MLBSplineInterpolator, &a0))
        {
            sipCpp = new MLBSplineInterpolator(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_MLBSplineInterpolator[] = {
    {SIP_MLNAME_CAST(sipName_addPoint), meth_MLBSplineInterpolator_addPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_calc), meth_MLBSplineInterpolator_calc, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_MLBSplineInterpolator_clear, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_MLBSplineInterpolator = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_MLBSplineInterpolator,
        {0}
    },
    {
        sipNameNr_MLBSplineInterpolator,
        {0, 0, 1},
        3, methods_MLBSplineInterpolator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_MLBSplineInterpolator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_MLBSplineInterpolator,
    0,
    0,
    0,
    release_MLBSplineInterpolator,
    cast_MLBSplineInterpolator,
    0,
    0,
    0
};
