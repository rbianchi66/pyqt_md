/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppBlocksInfo.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_BlocksInfo(void *, const sipTypeDef *);}
static void *cast_BlocksInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_BlocksInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_BlocksInfo(void *, int);}
static void release_BlocksInfo(void *sipCppV,int)
{
    delete reinterpret_cast<BlocksInfo *>(sipCppV);
}


extern "C" {static void dealloc_BlocksInfo(sipSimpleWrapper *);}
static void dealloc_BlocksInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_BlocksInfo(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_BlocksInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_BlocksInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    BlocksInfo *sipCpp = 0;

    {
        int a0;
        std::vector<Path2d> * a1;
        int a1State = 0;
        std::vector<Path2d> * a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iJ1J1", &a0, sipType_std_vector_0100Path2d,&a1, &a1State, sipType_std_vector_0100Path2d,&a2, &a2State))
        {
            sipCpp = new BlocksInfo(a0,*a1,*a2);
            sipReleaseType(a1,sipType_std_vector_0100Path2d,a1State);
            sipReleaseType(a2,sipType_std_vector_0100Path2d,a2State);

            return sipCpp;
        }
    }

    {
        const BlocksInfo * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_BlocksInfo, &a0))
        {
            sipCpp = new BlocksInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_BlocksInfo_grid(void *, PyObject *);}
static PyObject *varget_BlocksInfo_grid(void *sipSelf, PyObject *)
{
    std::vector<Path2d> *sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    sipVal = &sipCpp->grid;

    return sipConvertFromType(sipVal,sipType_std_vector_0100Path2d, NULL);
}


extern "C" {static int varset_BlocksInfo_grid(void *, PyObject *, PyObject *);}
static int varset_BlocksInfo_grid(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<Path2d> *sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<Path2d> *>(sipForceConvertToType(sipPy,sipType_std_vector_0100Path2d,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->grid = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_0100Path2d, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_BlocksInfo_num(void *, PyObject *);}
static PyObject *varget_BlocksInfo_num(void *sipSelf, PyObject *)
{
    int sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    sipVal = sipCpp->num;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_BlocksInfo_num(void *, PyObject *, PyObject *);}
static int varset_BlocksInfo_num(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->num = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_BlocksInfo_paths(void *, PyObject *);}
static PyObject *varget_BlocksInfo_paths(void *sipSelf, PyObject *)
{
    std::vector<Path2d> *sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    sipVal = &sipCpp->paths;

    return sipConvertFromType(sipVal,sipType_std_vector_0100Path2d, NULL);
}


extern "C" {static int varset_BlocksInfo_paths(void *, PyObject *, PyObject *);}
static int varset_BlocksInfo_paths(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<Path2d> *sipVal;
    BlocksInfo *sipCpp = reinterpret_cast<BlocksInfo *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<Path2d> *>(sipForceConvertToType(sipPy,sipType_std_vector_0100Path2d,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->paths = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_0100Path2d, sipValState);

    return 0;
}

sipVariableDef variables_BlocksInfo[] = {
    {sipName_grid, varget_BlocksInfo_grid, varset_BlocksInfo_grid, 0},
    {sipName_num, varget_BlocksInfo_num, varset_BlocksInfo_num, 0},
    {sipName_paths, varget_BlocksInfo_paths, varset_BlocksInfo_paths, 0},
};


sipClassTypeDef sipTypeDef__geo2dcpp_BlocksInfo = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_BlocksInfo,
        {0}
    },
    {
        sipNameNr_BlocksInfo,
        {0, 0, 1},
        0, 0,
        0, 0,
        3, variables_BlocksInfo,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_BlocksInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_BlocksInfo,
    0,
    0,
    0,
    release_BlocksInfo,
    cast_BlocksInfo,
    0,
    0,
    0
};
