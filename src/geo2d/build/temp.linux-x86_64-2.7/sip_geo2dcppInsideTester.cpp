/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Thu Mar 12 16:30:15 2015
 */

#include "sipAPI_geo2dcpp.h"


#line 14 "/home/rbianchi/projects/draw_areas/src/sipbin/stl.sip"
#include <vector>
#line 13 "sip_geo2dcppInsideTester.cpp"


extern "C" {static PyObject *meth_InsideTester_contains(PyObject *, PyObject *);}
static PyObject *meth_InsideTester_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Path2d * a0;
        bool a1 = 0;
        InsideTester *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|b", &sipSelf, sipType_InsideTester, &sipCpp, sipType_Path2d, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_InsideTester, sipName_contains, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_InsideTester___call__(PyObject *sipSelf,PyObject *sipArgs);}
static PyObject *slot_InsideTester___call__(PyObject *sipSelf,PyObject *sipArgs)
{
    InsideTester *sipCpp = reinterpret_cast<InsideTester *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_InsideTester));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const P2d * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_P2d, &a0))
        {
            bool sipRes;

            sipRes = (*sipCpp)(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_InsideTester, sipName___call__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_InsideTester(void *, const sipTypeDef *);}
static void *cast_InsideTester(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_InsideTester)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_InsideTester(void *, int);}
static void release_InsideTester(void *sipCppV,int)
{
    delete reinterpret_cast<InsideTester *>(sipCppV);
}


extern "C" {static void dealloc_InsideTester(sipSimpleWrapper *);}
static void dealloc_InsideTester(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_InsideTester(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_InsideTester(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_InsideTester(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    InsideTester *sipCpp = 0;

    {
        std::vector<Path2d> * a0;
        int a0State = 0;
        double a1 = 0.5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|d", sipType_std_vector_0100Path2d,&a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 14 "sip/inside.sip"
	// Genera eccezioni Python per alcune condizioni limite non gestite dal
	// codice di InsideTester (che causerebbero un assert).
        if (a0->size() == 0)
        {
	    PyErr_Format(PyExc_ValueError, "paths list is empty");
	    sipIsErr = 1;
	}
	else
	{
	    for (size_t i=0; i < a0->size(); ++i)
	    {
	        if ((*a0)[i].size() == 0)
	        {
		    PyErr_Format(PyExc_ValueError, "empty path in list");
		    sipIsErr = 1;
		    break;
	        }
	    }

	    if (!sipIsErr)
		sipCpp = new InsideTester(*a0, a1);
	}
#line 139 "sip_geo2dcppInsideTester.cpp"
            sipReleaseType(a0,sipType_std_vector_0100Path2d,a0State);

            if (sipIsErr)
            {
                if (sipUnused)
                    Py_XDECREF(*sipUnused);

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const InsideTester * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_InsideTester, &a0))
        {
            sipCpp = new InsideTester(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_InsideTester[] = {
    {(void *)slot_InsideTester___call__, call_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_InsideTester[] = {
    {SIP_MLNAME_CAST(sipName_contains), meth_InsideTester_contains, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef__geo2dcpp_InsideTester = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_InsideTester,
        {0}
    },
    {
        sipNameNr_InsideTester,
        {0, 0, 1},
        1, methods_InsideTester,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_InsideTester,
    init_InsideTester,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_InsideTester,
    0,
    0,
    0,
    release_InsideTester,
    cast_InsideTester,
    0,
    0,
    0
};
