#!/usr/bin/env python
#-*- coding: utf-8 -*-
from __future__ import division
import math
import geo2d
from geo2d import inside
from geo2d import inside_equal
import unittest

P = geo2d.P

class TestInside(unittest.TestCase):

    def inside_test(self, contorni, p_in, p_out, eps=0.5):
        paths = [geo2d.Path([geo2d.P(*p) for p in pts]) for pts in contorni]

        it = geo2d.InsideTester(paths, eps)
        for p in p_in:
            self.assertTrue(it(geo2d.P(*p)))
        for p in p_out:
            self.assertFalse(it(geo2d.P(*p)))

        # Utilizza un solo path per provare geo2d.inside() in entrambi
        # gli overload.
        if len(paths) == 1:
            paths = paths[0]

        for p in p_in:
            self.assertTrue(geo2d.inside(geo2d.P(*p), paths))
        for p in p_out:
            self.assertFalse(geo2d.inside(geo2d.P(*p), paths))

    def testEmptyTester(self):
        self.assertRaises(ValueError, lambda: geo2d.InsideTester([]))
        self.assertRaises(ValueError, lambda: geo2d.InsideTester([geo2d.Path([])]))

    def testTriangoloPath(self):
        """Test di contenimento su triangolo definito con Path"""
        p = geo2d.Path([geo2d.P(0, 10), geo2d.P(10, -10), geo2d.P(-10, -10)])
        pt_in = [geo2d.P(0, 0)]
        pt_out = [geo2d.P(10, 0)]

        self.inside_test([p], pt_in, pt_out)

    def testTriangoloPunti(self):
        """Test di contenimento su triangolo definito con punti"""
        p = [geo2d.P(0, 10), geo2d.P(10, -10), geo2d.P(-10, -10)]
        pt_in = [geo2d.P(0, 0)]
        pt_out = [geo2d.P(10, 0)]

        self.inside_test([p], pt_in, pt_out)

    def testCroce(self):
        """Test di contenimento su Path concavo a forma di croce"""
        croce = [(10, 10), (20, 10), (20, -10), (-10, -10),
                 (10, -20), (-10, -20), (-10, -10), (-20, -10),
                 (-20, 10), (-10, 10), (-10, 20), (10, 20)]

        p_in = [(0, 0), (10, 0), (0, 10), (-10, 0), (0, -10)]
        p_out = [(20, 20), (20, -20), (-20, -20), (-20, 20)]

        self.inside_test([croce], p_in, p_out)

    def testPathSeparati(self):
        """Test di contenimento su due Path separati"""
        p1 = [(-10, 10), (-1, 0), (-10, -10)]
        p2 = [(10, 10), (1, 0), (10, -10)]

        p_in = [(-5, 0), (5, 0)]
        p_out = [(0, 0), (1, 10), (-1, 10)]

        self.inside_test([p1, p2], p_in, p_out)

    def testPathIntersecanti(self):
        """Test di contenimento su due Path che si intersecano tra loro"""
        p1 = [(-10, 10), (1, 0), (-10, -10)]
        p2 = [(10, 10), (-1, 0), (10, -10)]

        p_in = [(-5, 0), (5, 0)]
        p_out = [(0, 0), (1, 10), (-1, 10), (0, 1), (0, -1), (11, 0)]

        self.inside_test([p1, p2], p_in, p_out)

    def testPathContenuti(self):
        """Test di contenimento su due path contenuti l'uno nell'altro"""
        p1 = [(-5, 5), (5, 5), (5, -5), (-5, -5)]
        p2 = [(-10, 10), (10, 10), (10, -10), (-10, -10)]

        p_in = [(7.5, 0)]
        p_out = [(2.5, 0), (12.5, 0)]

        self.inside_test([p1, p2], p_in, p_out)

    def testPathInsidePath(self):
        """Test di contenimento tra path, con geo2d.inside e InsideTester (bug #1847)"""

        paths = [[(20.184271999409066, -40.800000000000004),
                    (19.90954789272665, -40.590719340155481),
                    (19.816471021239693, -40.484143365381399),
                    (19.740033320150786, -40.356670824274026),
                    (19.676116444694365, -40.192292706068514),
                    (19.635767239800373, -40.0),
                    (19.629952181024745, -39.800000000000004),
                    (19.690295453427996, -39.400000000000006),
                    (37.865924405070523, 51.804612924481432),
                    (37.947183457015612, 52.185740991620492),
                    (38.03796960020474, 52.454888895192177),
                    (38.203385733750068, 52.694470638953092),
                    (38.307236445895107, 52.794662181943892),
                    (38.55306441923122, 52.955410075648459),
                    (38.676419453955681, 52.998202430503014),
                    (38.821779635970451, 53.020878850120361),
                    (40.46458909293424, 53.20734330720159),
                    (44.200000000000003, 53.674124812646987),
                    (48.600000000000001, 54.288039867099883),
                    (51.783461043639228, 54.768616312652625),
                    (54.630379548335625, 55.227225825944771),
                    (59.600000000000001, 56.080727060481721),
                    (65.701201930252267, 57.199744074384377),
                    (73.400000000000006, 58.680666907903316),
                    (80.090247057464751, 60.00343353324709),
                    (80.395234283918583, 60.087192145113356),
                    (80.681158646046754, 60.218298318845285),
                    (87.068780125678472, 63.827022885865055),
                    (93.435093113844943, 67.464548249554781),
                    (98.864173105184463, 70.630528201732275),
                    (103.36956516748924, 73.327614272639309),
                    (105.60370007540621, 74.697494923221214),
                    (107.94605884822028, 76.159294953925908),
                    (112.08392051530046, 78.8142285249601),
                    (115.09246421287833, 80.806446232724056),
                    (116.52637274405662, 81.774718196526777),
                    (116.65237931616917, 81.844709991115906),
                    (116.8099698290423, 81.907127835763902),
                    (117.0, 81.951734749497319),
                    (117.2, 81.962672794005655),
                    (117.39442747149928, 81.936146302604996),
                    (117.56520988599709, 81.878645679043586),
                    (117.81919509584026, 81.715048998410282),
                    (191.24719767211229, 24.147326504460683),
                    (191.57223015239572, 23.874190070223136),
                    (191.7522153546243, 23.648208945411525),
                    (191.81123136341233, 23.529196043067628),
                    (191.85367027360124, 23.381964028711753),
                    (191.87636946982764, 23.198616007177939),
                    (191.86909863755361, 23.007997948132076),
                    (191.83601768308387, 22.844491792528302),
                    (191.78408853274678, 22.713056958596336),
                    (191.62156985782929, 22.478455955099129),
                    (191.52188311941183, 22.38044663179052),
                    (191.17290794996254, 22.119257464654368),
                    (184.51568820200742, 17.38730737831731),
                    (177.67840111273082, 12.618530201181706),
                    (171.98489136774148, 8.7099721762355369),
                    (159.01606073182114, -0.11085923653708003),
                    (155.1079416484653, -2.8059722179294568),
                    (151.45136242117852, -5.3551636871667245),
                    (146.29188613523249, -8.9942050331663577),
                    (141.27019568494114, -12.574685499389128),
                    (134.05874500194105, -17.764097205499237),
                    (133.79062647077353, -17.91746273802654),
                    (133.62278899447543, -17.971213990756755),
                    (133.48801056614738, -17.994875720366725),
                    (133.31303469522436, -17.991651502906485),
                    (133.17780829773702, -17.961569148120855),
                    (133.00904870619453, -17.90502907102854),
                    (132.73397419287863, -17.770408361571988),
                    (118.48134175255332, -9.4170138465946049),
                    (116.13805684298859, -7.9681034531321959),
                    (115.04590216920465, -7.2525942844122797),
                    (114.09609740098402, -6.6033807687982664),
                    (113.16222557427164, -5.9337988632946876),
                    (112.14285246042496, -5.1607231137487872),
                    (111.03651703301985, -4.270575100241933),
                    (110.17300928904774, -3.5248706204475924),
                    (109.22997207511999, -2.6727812216923645),
                    (108.1073393310961, -1.592339727223713),
                    (107.31066117010685, -0.78806483243797565),
                    (106.33619760401695, 0.24012144753331233),
                    (105.29119989693859, 1.3910273768667452),
                    (104.36212684996622, 2.4584430403035977),
                    (103.1764264037307, 3.870932784953192),
                    (102.01210797311401, 5.3151954516800117),
                    (100.97028895373086, 6.6658223195473596),
                    (99.689800446896541, 8.3968586658938076),
                    (99.467276077211466, 8.5765727302720673),
                    (99.407933899669558, 8.6544891106294646),
                    (99.401303216076286, 8.7843184828495087),
                    (99.597093758307523, 6.0771723725220719),
                    (99.680970257814792, 4.4000000000000004),
                    (99.729346115176739, 2.8000000000000003),
                    (99.756546370506896, 0.60000000000000009),
                    (99.742939210172878, -0.80000000000000004),
                    (99.70257706290954, -2.2000000000000002),
                    (99.612158092909979, -3.9699816278412623),
                    (99.515519362791409, -5.2000000000000002),
                    (99.388017761918036, -6.4477274812747316),
                    (99.217465371483613, -7.7556356646542675),
                    (99.054237618026136, -8.7941225691790752),
                    (98.78298699951695, -10.255650596975059),
                    (98.568206312395688, -11.23535864397814),
                    (98.333323686237136, -12.208424762097021),
                    (97.956753247739499, -13.630309546821934),
                    (97.54907473135593, -15.028363801926785),
                    (97.168692484452436, -16.250273877916182),
                    (96.723278982188319, -17.609164531766712),
                    (91.395170986881496, -33.091581401857759),
                    (91.281090284902234, -33.3738911520269),
                    (91.202591112741842, -33.504910462478428),
                    (91.109826751215977, -33.611920591327362),
                    (90.887096125265188, -33.784997141562222),
                    (90.756735881397532, -33.845699139660702),
                    (90.592308970349393, -33.892725508676364),
                    (90.200000000000003, -33.948273861416332),
                    (81.800000000000011, -34.666581879866797),
                    (75.400000000000006, -35.243294892493068),
                    (69.372429288813109, -35.816084049303903),
                    (64.600000000000009, -36.295955311806679),
                    (59.880872621471909, -36.796550509222712),
                    (43.871190433883733, -38.594458926026263),
                    (37.200000000000003, -39.312481317896271),
                    (29.200000000000003, -40.114838387173499),
                    (20.800000000000001, -40.883695850621102),
                    (20.600000000000001, -40.893852349282341),
                    (20.411516999963069, -40.877923620205458),
                    (20.184271999409066, -40.800000000000004)],
                   [(21.88905021425138, -38.600000000000001),
                    (39.666099314591115, 50.604554409568451),
                    (39.706000880708984, 50.792511188847847),
                    (39.7596761102551, 50.953879253023153),
                    (39.855291865319487, 51.063152943887786),
                    (40.009056583202394, 51.125497906423391),
                    (40.19588057362688, 51.160155637604191),
                    (44.400000000000006, 51.682070837562563),
                    (49.194733987869157, 52.351480290870747),
                    (51.97335626421625, 52.772983415409556),
                    (54.547941107041474, 53.184279357928837),
                    (59.60679153833604, 54.049839028632135),
                    (66.036469142612248, 55.22703558490079),
                    (73.600000000000009, 56.681500757461542),
                    (80.798467827485567, 58.09496105423375),
                    (80.981371309942247, 58.131486297652344),
                    (81.128306964913364, 58.180660855922987),
                    (87.644302361112608, 61.852734153447571),
                    (94.263017685167384, 65.631670208540655),
                    (99.700700509300518, 68.800201093661698),
                    (104.20640909894203, 71.495419094497265),
                    (106.43876346783087, 72.861257484286611),
                    (109.02892847853497, 74.476302097411164),
                    (113.04611287620162, 77.052153333233832),
                    (116.89231570100809, 79.598791612583852),
                    (117.02458967344579, 79.6420747176888),
                    (117.16131944126295, 79.636508515931382),
                    (117.28643160568207, 79.582968531489712),
                    (117.40147563392031, 79.501156901331512),
                    (189.04058891816166, 23.335927693186267),
                    (189.13842041084791, 23.257814125484622),
                    (189.18023709009199, 23.199675433056871),
                    (189.13848550008638, 23.141291022734386),
                    (188.80961119416085, 22.893257358029469),
                    (183.43365626474542, 19.072394450054059),
                    (176.71665223129924, 14.386354378234518),
                    (171.02845096539284, 10.479153147432658),
                    (157.81369780009857, 1.4906248940807139),
                    (153.78494006036928, -1.2891321293670694),
                    (150.02116434763545, -3.9146213209534828),
                    (145.09097940385232, -7.393475594257473),
                    (139.72473160233969, -11.220766658550419),
                    (133.67313178197045, -15.577411929564315),
                    (133.54793790607243, -15.655522675348795),
                    (133.39010947651812, -15.704781312114415),
                    (133.2115766254023, -15.694752636026227),
                    (133.05880650160915, -15.638808200770752),
                    (132.93470914788324, -15.570391809108152),
                    (119.82034370157304, -7.8840776784586808),
                    (118.44508222881844, -7.0528729568243023),
                    (116.97157044565972, -6.1224772321101657),
                    (115.29863000801726, -5.0011505384557919),
                    (114.36295025557115, -4.331808988517003),
                    (113.79374861738141, -3.9047165556012722),
                    (112.56258624362795, -2.9308904774645406),
                    (111.59222769114609, -2.1071500810643866),
                    (110.75019150522508, -1.3498865975461074),
                    (109.82659926275861, -0.47450815452297612),
                    (109.02392609180839, 0.32415086348391742),
                    (107.94642390272344, 1.4478068294602005),
                    (107.08779119934849, 2.3864733754247114),
                    (105.68997034739894, 3.9880874183918689),
                    (104.77870778504791, 5.0740164963654184),
                    (103.70353538837124, 6.4049162097084524),
                    (102.65673188695369, 7.7552296192280981),
                    (101.71577811875983, 9.0213611718981728),
                    (100.47947293283838, 10.772136961327522),
                    (99.674864458431401, 11.969528405073783),
                    (98.652939079168192, 13.555091607487123),
                    (98.449043288795025, 13.750371529566905),
                    (98.332899810956263, 13.819994101102679),
                    (98.184433207304167, 13.878298285783856),
                    (97.999233301826052, 13.919951256651855),
                    (97.800000000000011, 13.927784213323648),
                    (97.608730583525983, 13.898437254216063),
                    (97.447422334103933, 13.845543007988255),
                    (97.321392668872434, 13.778263864579557),
                    (97.210959004970093, 13.692075606630414),
                    (97.024142504156714, 13.475727215763001),
                    (96.958616045277566, 13.350596473159815),
                    (96.905682692513551, 13.190774118289955),
                    (96.874877773405601, 13.0),
                    (96.875698449744618, 12.800000000000001),
                    (96.897994416617692, 12.600000000000001),
                    (97.123887531169203, 11.0),
                    (97.311002788415351, 9.4000000000000004),
                    (97.496214265589472, 7.4000000000000004),
                    (97.601213218490273, 5.9174117641255961),
                    (97.68613330726788, 4.2000000000000002),
                    (97.738769752066617, 2.4000000000000004),
                    (97.754114365627615, 1.0),
                    (97.744243338868245, -0.60000000000000009),
                    (97.713899656237899, -1.8),
                    (97.606725844910244, -3.9469922170008971),
                    (97.523677435279936, -5.0),
                    (97.393259654905975, -6.2677421846922172),
                    (97.246596806885492, -7.3942836068293989),
                    (97.057926436117697, -8.5946576694835422),
                    (96.779834548255593, -10.05230974251031),
                    (96.595418344933407, -10.889117442621107),
                    (96.321786428417042, -12.005825065555886),
                    (95.79792178790612, -13.895730896250232),
                    (95.22873857705207, -15.746326950225887),
                    (94.789742186851242, -17.082362799497556),
                    (89.817377646170058, -31.530295126811019),
                    (89.7022287691576, -31.79589915675723),
                    (89.609421728260259, -31.921262681190981),
                    (89.500829374828783, -31.988731208930986),
                    (89.366196498169288, -32.012420606223905),
                    (81.600000000000009, -32.676115905950141),
                    (75.200000000000003, -33.25292058381693),
                    (69.0, -33.842455145341269),
                    (64.400000000000006, -34.305651765236505),
                    (59.571648246322177, -34.817698178170197),
                    (43.563271330192997, -36.615073621328705),
                    (37.0, -37.321795815742298),
                    (29.200000000000003, -38.104706750207995),
                    (22.400000000000002, -38.72812856210691),
                    (22.205565638390713, -38.732404139368043),
                    (22.033393830344266, -38.692400781677421),
                    (21.88905021425138, -38.600000000000001)]]

        path1 = geo2d.Path([geo2d.P(p[0], p[1]) for p in paths[0]])
        path2 = geo2d.Path([geo2d.P(p[0], p[1]) for p in paths[1]])

        it1 = geo2d.InsideTester([path1])
        it2 = geo2d.InsideTester([path2])

        def pathPath(path1, path2, tester):
            """True se path1 interno a path2, False altrimenti."""
            for p in path1:
                if not tester(p, path2):
                    return False

            return True

        # Fa i test di contenimento con degli InsideTester
        self.assertEqual(pathPath(path1, path2, lambda p, path: it2(p)), False)
        self.assertEqual(pathPath(path2, path1, lambda p, path: it1(p)), True)

        # Stessi controlli, però con la geo2d.inside
        self.assertEqual(pathPath(path1, path2, geo2d.inside), False)
        self.assertEqual(pathPath(path2, path1, geo2d.inside), True)

    def testInsideEqual(self):
        self.p1 = geo2d.Path([P(0,0), P(10,0), P(10,10), P(0,10), P(0,0)])
        # Rombo chiuso in 0,0 di diagonali 10 e 5
        self.p3 = geo2d.Path([P(0,0), P(2.5,5), P(0,10), P(-2.5,5), P(0,0)])
        # punto interno al rombo
        self.assertEqual( geo2d.inside_equal(P(1, 2.5), self.p3, True), True)
        self.assertEqual( geo2d.inside_equal(P(1, 2.5), self.p3, False), True)
        # punto esterno al rombo
        self.assertEqual( geo2d.inside_equal(P(2, 2.5), self.p3, True), False)
        self.assertEqual( geo2d.inside_equal(P(2, 2.5), self.p3, False), False)
        # punto su lato obliquo del rombo
        self.assertEqual( geo2d.inside_equal(P(1.25, 2.5), self.p3, False), False)
        self.assertEqual( geo2d.inside_equal(P(1.25, 2.5), self.p3, True), True)
        # punto interno al quadrato
        self.assertEqual( geo2d.inside_equal(P(5,5), self.p1, True), True)
        self.assertEqual( geo2d.inside_equal(P(5,5), self.p1, False), True)
        # punto esterno al quadrato
        self.assertEqual( geo2d.inside_equal(P(11,11), self.p1, True), False)
        self.assertEqual( geo2d.inside_equal(P(11,11), self.p1, False), False)
        # punto su segmento verticale
        self.assertEqual( geo2d.inside_equal(P(10,5), self.p1, True), True)
        self.assertEqual( geo2d.inside_equal(P(10,5), self.p1, False), False)
        # punto su segmento orizzontale
        self.assertEqual( geo2d.inside_equal(P(5,0), self.p1, True), True)
        self.assertEqual( geo2d.inside_equal(P(5,0), self.p1, False), False)
        # punto su vertice
        self.assertEqual( geo2d.inside_equal(P(0,0), self.p1, False), False)
        self.assertEqual( geo2d.inside_equal(P(0,0), self.p1, True), True)
        # altro punto su vertice
        self.assertEqual( geo2d.inside_equal(P(10,10), self.p1, False), False)
        self.assertEqual( geo2d.inside_equal(P(10,10), self.p1, True), True)

    def testInsideZeroRange(self):
        """
        Inside Test per path con valori piccoli

        By design: In millimetri una precisione di 0.5mm e' sufficiente.
        Nel caso di valori piu' piccoli, basta specificare un epsilon adeguato.
        """
        path1 = [(0.0005, 0.0001),
                 (0.0010, 0.0001),
                 (0.0010, 0.0010),
                 (0.0005, 0.0010),
                 (0.0005, 0.0001)]
        p_in1 = [(0.0007, 0.0007), (0.0006, 0.0004)]
        p_out1 = [(1.0, 1.0), (0.0008, 0.005)]
        self.inside_test([path1], p_in1, p_out1, 0.001)

        path2 = [(0.0000005, 0.0000001),
                 (0.0000010, 0.0000001),
                 (0.0000010, 0.0000010),
                 (0.0000005, 0.0000010),
                 (0.0000005, 0.0000001)]
        p_in2 = [(0.0000007, 0.0000007), (0.0000006, 0.0000004)]
        p_out2 = [(1.0, 1.0), (0.0000027, 0.0000007)]
        self.inside_test([path2], p_in2, p_out2, 0.0000001)

        path3 = [(0.16, 0.50),
                 (0.30, 0.50),
                 (0.30, 0.70),
                 (0.16, 0.70),
                 (0.16, 0.50)]
        p_in3 = [(0.21, 0.60)]
        p_out3 = [(1.0, 1.0), (0.35, 0.65), (0.12, 0.62)]
        self.inside_test([path3], p_in3, p_out3, 0.1)

        path4 = [(0.00, 0.00),
                 (2.00, 0.00),
                 (2.00, 0.90),
                 (1.00, 0.90),
                 (1.00, 1.20),
                 (2.00, 1.20),
                 (2.00, 2.00),
                 (0.00, 2.00),
                 (0.00, 0.00)]
        p_in4 = [(0.5, 0.5), (1.5, 1.5)]
        p_out4 = [(5.0, 5.0), (1.5, 1.15), (1.9, 0.96), (3.0, 1.0)]
        self.inside_test([path4], p_in4, p_out4, 0.2)

class TestContains(unittest.TestCase):
    def setUp(self):
        quadrato = geo2d.Path([P(0,0), P(100,0), P(100,100), P(0,100), P(0,0)])
        foro = geo2d.Path([P(50,50), P(90,50), P(90,90), P(50,90), P(50,50)])
        self.contorni = [quadrato, foro]
        self.it1 = geo2d.InsideTester(self.contorni)
        # triangolo contenuto completamente nel "pezzo"
        self.triangolo_in = geo2d.Path([P(10,10), P(40,10), P(40,40), P(10,10)])
        # triangolo contenuto nel "pezzo" però con la punta nel foro
        self.triangolo_over = geo2d.Path([P(10,10), P(40,10), P(60,60), P(10,10)])
        # quadrato non contenuto nel pezzo perché contiene il pezzo
        self.quadrato_xout = geo2d.Path([P(-10,-10), P(110,-10), P(110,110), P(-10,110), P(-10,-10)])
        # quadrato non contenuto nel pezzo perché contenuto nel foro
        self.quadrato_out = geo2d.Path([P(60,60), P(60,80), P(80,80), P(80,60), P(60,60)])
    def testContainsAll(self):
        self.assertTrue(self.it1.contains(self.triangolo_in))
        self.assertTrue(self.it1.contains(self.triangolo_in, True)) # se è completo è anche parziale
    def testContainsPartial(self):
        self.assertFalse(self.it1.contains(self.triangolo_over))
        self.assertTrue(self.it1.contains(self.triangolo_over, True)) # è solo parziale
    def testNotContainsOuter(self):
        self.assertFalse(self.it1.contains(self.quadrato_xout))
    def testNotContainsInner(self):
        self.assertFalse(self.it1.contains(self.quadrato_out))
    def testOverlaps(self):
        self.assertTrue(geo2d.check_overlaps(self.contorni, [self.triangolo_in]))
        self.assertTrue(geo2d.check_overlaps(self.contorni, [self.triangolo_over]))
        self.assertTrue(geo2d.check_overlaps(self.contorni, [self.quadrato_xout]))
        self.assertFalse(geo2d.check_overlaps(self.contorni, [self.quadrato_out]))


if __name__ == "__main__":
    unittest.main()
